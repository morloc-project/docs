
=== Index and Refinement types

**Nothing here has been implemented yet**

This section will first introduce what information the additional type
annotations will provide and will then cover what can be done with this
information.

The type system described so far allows for clear expressions of general
intent, for example, `(a,b) -> b`. But often these signatures are too general
to be informative and too permissive to be safe. They can be improved by
allowing constraints to be placed on the types.

I'll introduce these ideas with a series of motivating examples.

Suppose there is a function with the signature `[a] -> [a]`. This could be a
sort function, reverse function, or subsampling function. Index types can
clarify the meaning:

[source,haskell]
----
reverse :: [a]_{n} -> [a]_{n}
sort :: [a]_{n} -> [a]_{n}    -- note, for now, this has the same signature as reverse
head :: [a]_{n} -> a
transpose :: Matrix_{m,n} a -> Matrix_{n,m} a
----

The index types just describe the dimension of the data.

[source,haskell]
-------------------------
-- where n is an integer or expression that evaluates to an integer, the
-- expressions may have arithmetic binary operators, min, max, etc
A_{n}
A_{n+1}
A_{n} -> A_{1}
A_{n} -> A_{m} -> A_{m + n}
A_{n} -> A_{m} -> A_{max m n}

-- Expressions may have multiple indices (e.g., matrices and graphs)
Matrix_{m,n} -- row and column counts
Graph_{e,v}  -- counts of edges and vertices in the graph
-------------------------

How do I specify the shape of a term?

[source,haskell]
-------------------------
shapeA :: shape => A -> Int
shapeMatrix :: shape => Matrix -> (Int,Int)
-------------------------

Index types, though, are just sugar for a subset of refinement types.

[source,haskell]
-------------------------

type Prob = { x:Num | 0 <= x <= 1 }
type Index = { x:Int | 1 <= x }

reverse :: xs:[a]_{n} -> {ys:[a]_{n} | xs[i] == ys[n - i], 1 <= i <= n }
sort :: [a]_{n} -> {xs:[a]_{n} | xs[i] <= xs[i+1], 0 < i < n}
head :: { [a]_{n}      | n > 1 } -> a
head :: { [a]_{n} -> a | n > 1 }
head :: [a]_{n} -> a where { n > 1 } 

-------------------------

Array indices can also be accessed in the types. This allows, for example, for
types with autocorrelation to be expressed.

[source,haskell]
-------------------------
type GaussianWalk = { xs:[Num]_n | xs[i+1] ~ Norm(xs[i], 1), 0 < i < n }
scale :: { [x:Num]_{n} | x ~ Norm(m,s) } -> { [y:Num]_{n} | y ~ Norm(0, 1) }
scale :: { xs:[Num]_{n} | xs[i] ~ Norm(m,s), 0 < i <= n } -> { ys:[Num]_{n} | ys[i] ~ Norm(0, 1)}
-------------------------

A few questions:
  * should indexing be 1-based (as in math) or 0-based (as in most computer langauges)?
  * does indexing make sense for non-ordered sets (e.g., graph nodes and edges)?
  * what about dictionaries that are indexed with non-integer keys?
  * what about scoping? Are both *i*'s the same in the code below?
    `{ xs:[Num]_n | xs[i] ~ Exp(4), 0 < i <= n } -> { ys:[Num]_m | ys[i] ~ Exp(5), 0 < i < m }`

Scoping should be global within the type signature. So above, the actual bounds
on i would be `0 < min n m`, which is probably not what the user intended. This
would leave some elements untyped.

  * some refinements may be handled statically, but probably not all
  * is indexing just sugar that can be rewritten in refinement type terms? (probably)

[source,haskell]
--------------------------
-- using indexing
reverse :: [a]_n -> [a]_n

-- using refinement type syntax
reverse :: xs:[a] -> { ys:[a] | len xs = len ys } 
reverse :: { xs:[a] -> ys:[a] | len xs = len ys }
--------------------------

==== How are the types used

The system f layer of the morloc type system is statically typed. Typeclasses,
when they are added, will be statically typed as well.

However, the refinement types, particularly when they are using user-defined
functions, will not always be checkable statically, and instead will generate
(optional) runtime assertions.

Hybrid systems that perform static checking for decidable problems and generate
runtime assertions of undecidable cases have been explored cite:[xu2012hybrid].

How will we divide what can and cannot be statically checked?


==== Additional typing examples


[source,haskell]
--------------------------
align :: { [xs:[Char]]_n | len xs[i] > k1, 0 < i <= m } -> { [ys:[Char]]_n | len ys[i] = k2}

align :: Char -> [xs:[Char]]_n -> [ys:[Char]]_n
  where
    0 < i <= n
    len xs[i] > k1 
    len ys[i] = k2
    k2 >= k1
    ungap xs[i] = ungap ys[i]

ungap :: [Char]_n -> { [Char]_m | m <= n }
-------------------------- 

[source,haskell]
-------------------------- 
foo :: {n:Int | n >= 0} -> [a]_{n}
bar :: {[a]_{n} | n > 0} -> a 

-- fails at compile time
f xs = bar (foo 0 xs)

-- passes at compile time, refining the constraint on n to {n > 0}
g k xs = bar (foo k xs)
-------------------------- 

==== Typing and test generation

One goal of morloc is to be able to generate test data from the type signatures
and ensure that running the functions on the generated data 1) doesn't fail at
runtime and 2) yields data that respects all constraints on the function
output.

The goal is essentially to add property testing to the type signatures.

==== Typing and performance modeling

If data can be generated based on the type signatures, and if functions are
given that map from input data to model features, then a performance model can
be generated that is a function of the input features. These input features are
descriptions of the input data. For example, a generic list has exactly one
features, its length. The features of a graph might be edge count, node count,
and select centrality measures.

This could be implemented as a typeclass:

[source,haskell]
---------------------------------------
class Typecheckable a where
  features :: a -> [Num]
---------------------------------------

That is, if a vector of numeric features can be derived for a type, then for a
list of examples of this type a feature table can be created. Then the examples
can be run through the function and performance statistics can be measured.
Then a model can be made that predicts runtime and memory usage from the
features.



==== Another discussion

[source,haskell]
------------------------------------------------
[[Char]_{m_i}]_n -> Matrix_{n,m} Char

[[Char]_{m_i}]_n -> Matrix_{n,m >= m_i} Char

[[Char]_{m_i}]_n -> [[Char]_{m | m >= m_i}]_n
------------------------------------------------



[source]
-----------------------------------------
    xs:[...]_{5}
 --------------------
    len xs = 5

    xs:[...]_n
 --------------------
    exists Nat n
    let n = len xs    -- bind n to the first dimension of xs

    x:Array_{n,m} a
 --------------------
    exists Nat n
    let n = nrow x
    exists Nat m
    let m = ncol x

    xs:[...]_{n > 5}
 --------------------
    exists Nat n
    n = len xs
    n > 5

    x:Array_{n,m > 5} a
 --------------------
    exists Nat n
    n = nrow x
    exists Nat m
    m = ncol x
    m > 5
-----------------------------------------

Exactly 1 value is available to be bound in each dimensional slot. The
expression `n` uses one value, so this one value MUST be the row dimension. `m
> 5` is in the column dimension slot and defines one variable, `m`, so `m` must
be the column dimension.


[source]
-----------------------------------------
    xs:[...]_{n > m}
 --------------------
    ! cannot resolve
-----------------------------------------

Here the length dimension slot has two variables defined, but there is only one slot, so an error is raised.

[source]
-----------------------------------------
    xs:[...]_{n > m}
    ys:[...]_{m > 5}
 --------------------
    exists Nat n
    exists Nat m
    -- cannot resolve {n > m}, so continue
    m = len ys
    m > 5
    -- now backtrack
    n = len xs
    n > m

    xs:[...]_{m > n} -> ys:[...]_{m > p} -> zs:[...]_{p}
 ----------------------------
    -- same thing, just requires 3 loops

    xs:[...]_{n > m}
    ys:[...]_{m < n}
 --------------------
    exists Nat n
    exists Nat m
    -- cannot resolve {n > m} so contineu
    -- cannot resolve {m > n} so backtrack
    ... -- infinite loop, break with a raised error when a loop resolves nothing
-----------------------------------------

The law of relevance, any statement in the index clause must be about the index of the type.


[source]
-------------------------------------------
    xs:[...]_n -> ys:[...]_n
 ----------------------------
    exists Nat n
    n = len xs
    n = len ys

    xs:[...]_n -> ys:[...]_{n > 5}
 ----------------------------
    exists Nat n
    n = len xs
    n = len ys
    n > 5


    xs:[ys:[...]_n]
 --------------------
    forall ys
        len ys = n

    xs:[ys:[...]_{n_i; n_i < 5}]
 --------------------
    forall i in 
-------------------------------------------
