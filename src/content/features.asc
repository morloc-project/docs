
=== Primitives and containers

```
data : True | False
     | number
     | string
     | [data, ...]       -- lists
     | (data, ...)       -- tuples
     | {x = data, ...}   -- records
```

As for as `morloc` is concerned, `number` is of arbitrary length and precision.
Strings are double quoted and support escapes. In the future, I will add
support for string interpolation.

=== Functions

Function definition follows Haskell syntax.

[source, morloc]
----
foo x = g (f x)
----

`morloc` supports the `.` operator for composition, so we can re-write `foo` as:

[source, morloc]
----
foo = g . f
----

`morloc` supports partial application of arguments.

For example, to multiply every element in a list by 2, we can write:

[source, morloc]
----
multiplyByTwo = map (mul 2.0)
----


=== Type signatures and type functions

General type declarations also follow Haskell syntax:

[source, morloc]
----
take :: Int -> List a -> List a
----

Where `a` is a generic type variable. `morloc` supports `[a]` as sugar for `List a`.

The general types may be translated to concrete types by fully evaluating them
with a set of language-specific type functions. For example:


[source, morloc]
----
type Cpp => Int = "int"
type Py => Int = "int"

type Cpp => List a = "std::vector<$1>" a
type Py => List a = "list" a
----

Language-specific types are always quoted since they may contain syntax that is
illegal in the `morloc` language.

Type functions may also map between general types.

[source, morloc]
----
type (Pairlist a b) = [(a,b)]
----

Why do I call them type functions, rather than just aliases? There is a lot more
that can be done with these functions that I am just beginning to explore.


=== Sourcing functions

Sourcing a function from a foreign language is done as follows:

[source,haskell]
----
source Cpp from "foo.h" ("mlc_foo" as foo) 

foo :: A -> B
----

Here we state that we are importing the function `mlc_foo` from the `C++` source
file `foo.h` and calling it `foo`. We then give it a general type signature.

Currently `morloc` treats language-specific functions as black boxes. The
compiler does not parse the `C++` code to insure the type the programmer wrote
is correct. Checking a `morloc` general type for a function against the source
code may often be possible with conventional static analysis. LLMs are also
quite effective at both inferring `morloc` types from source code and checking
types against source code.


=== Records, objects, and tables

Support of records, objects and tables in `morloc` is still immature.

`records`, `objects` and `tables` are all defined with the same syntax (for
now) but have different meanings.

A `record` is a named, heterogenous list such as a `struct` in C, a `dict` in
Python, or a `list` in R. The type of the record exactly describes the data
stored in the record (in contrast to parameterized types like `[a]` or `Map a b`).

A `table` is like a record where all types are replaced by lists of that type.
But `table` is not just syntactic sugar for a record of lists, the `table`
annotation is passed with the record through the compiler all the way to the
translator, where the language-specific serialization functions may have
special handling for tables.

An `object` is a record with baggage. It is a special case of an OOP class
where all arguments passed to the constructor can be accessed as public fields.

All three are defined in similar ways.

[source, morloc]
----
record (PersonRec a) = PersonRec {name :: Str, age :: Int}
record Cpp => PersonRec a = "MyObj"

table (PersonTbl a) = PersonObj {name :: Str, age :: Int}
table R => PersonTbl a = "data.frame"
table Cpp => PersonTbl a = "struct"

record (PersonRec a) = PersonRec {name :: Str, age :: Int}
object Cpp => PersonRec a = "MyObj"
----

Notice that `object` is undefined for general types, since they don't check
luggage. Also note the difference between the type constructor (e.g.
`PersonRec`) and the data constructor (e.g., `"MyObj"`). The latter corresponds
to the class constructor in the OOP language.

=== Modules

A module includes all the code defined under the `import <module_name>`
statement. It can be imported with the `import` command.

The following module defines the constant `x` and exports it.

[source, morloc]
----
module foo (x)
x = 42
----

Another module can import `Foo`:

[source]
----
import Foo (x)

...
----

A term may be imported from multiple modules. For example: 

[source, morloc]
----
module main (add)
import cppbase (add)
import pybase (add)
import rbase (add)
----

This module imports that `C++`, Python, and R `add` functions and exports all
of them. Modules that import `add` will import three different versions of the
function. The compiler will choose which to use.


=== Core libraries

Each supported language has a base library that roughly corresponds to the
Haskell prelude. They have functions for mapping over lists, working with
strings, etc. They also contain standard type aliases for each language. For
example, `type Cpp => Int = "std::string"`.

