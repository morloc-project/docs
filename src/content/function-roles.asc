== Functions may have roles 

There are a few roles that are builtin to the compiler:

 * load - R -> ?G | R -> ?M
   
Load an external resource into a general form (i.e. conversion to CDF) or
a machine type. Loading can fail.

 * write - G -> ?R | M -> ?R

Write to the given resource (generally not to the CDF). Writing can fail.

.Examples:
  ** upload data to a database
  ** write a file
  ** send an email

 * convert - M -> M | M -> G | G -> M

A reversible conversion from x to y. 

Examples:
  ** +(R)+ data.frame -> data.table
  ** (a, b, c) -> (b, c, a)
  ** Foot -> Meter

 * downcast - M -> M | G -> G | G -> M | R -> R

Convert one type to another descendent type, possibly irreversible

Examples:
  ** FullName -> GivenName  -- both are names
  ** Double -> Integer      -- both are numbers
  ** Integer -> String

 * upcast - M -> ?M | G -> ?G | G -> ?M | R -> ?R

Attempts to upcast, this may fail

.Examples:
  ** String -> ?Integer

 * specialize - M -> M | M -> G | G -> M

Like convert, but may not be reversible, however the data should be the
same, in some sense. Formally, they share a common ancestor.

.Examples:
  ** (a, b, c) -> (a, b)    -- both are tuples

 * transform - M -> M | M -> G | G -> M 
    
This role is used when there is one natural transformation between two
types. But no concept of specialization. The things on both sides are
different.

.Examples:
  ** Person -> Age
  ** Graph -> Size
  ** sorting given a comparator
