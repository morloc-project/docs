
== old letter 

`morloc` is a highly minimal, functional programming language with a semantic
type system and a very special compiler. The language exclusively relies on
functions cannibalized from other languages. The transfer of data between the
constituent functions is entirely automated such that the `morloc` programmer
needn't know where the function came from. Likewise, the programmer who writes
the function needn't know that their function will be consumed by `morloc`; they
are free to write in completely idiomatic prose, without boilerplate.

The semantic type system is what makes this possible. Think semantic web.
Ontologies. The types, and the relationships between them, are specified in an
ontology. Every function is given a signature that describes the inputs and
outputs of the function and also lists any constraints. This function signature
and the type ontology are the two pieces of information shared between `morloc`
programmer and function writer. The type ontology and the function signatures
are the axioms of a logical system. The code written by the programmer compiles
to a list of logical statements. The program is correct if the whole system is
logically consistent.

Logic programming is old. Very old. But over the last few decades it has gone
out of fashion. With the rise of the semantic web, that is beginning to change.
Logic machines are beginning to challenge deep learning as a path to general
intelligence (see Doug Lenat).

A semantic type system would allow expression of relations between types.
A possible relation might be, "There exists Filename openable as Text". Then if
you pass a Filename to a function expecting Text, the compiler can infer that
Filename is convertable, with possible failure, to Text. It can then search
a database for a suitable function, and if the function is found, insert it
between Filename and Text. By importing different sets of relations, the
strictness of a program can be finely tuned. Behavior that is hard-coded in
most languages, becomes easily customizable. If you want your pipeline to
automatically try to resolve type conflicts by converting a String to a Number
(as is done dynamically in Perl), you just have to add the relation that Number
can be cast as a String (the reasoner can then infer that some String can be
cast as Number).

The compiler's logical inference can go further. In principle, if a path exists
between any two types, the compiler can find it (e.g. Internet -> LaunchCodes)
and build a logically correct program. While the function signatures are highly
expressive, they do not specify what actually happens inside the function.
Functions in `morloc` are black boxes. The function signatures are premises of
the system. However, functions are types and they also can be annotated with
additional semantic information.

The semantic type system gives all the information the compiler needs to
convert data between languages. Concrete, language-specific types would map to
instances of the type classes. A given language may have 0 or more instances
for a given type (e.g. the C types 'float' and 'double' might both be instances
of the `morloc` type 'Real'). The compiler would sometimes need a hint from the
programmer about which instance to use.

Semantic types offer many additional possibilities. Sets of inter-convertible
types could be specified (e.g. {Meter, Foot, Angstrom} or sequence alignment
formats {ClustalW, Stockholm}). Types could be given attributes, such as
`has_length` which could be automatically used in descriptive statistics. The
semantic type system could, I think, emulate the typeclasses of Haskell, e.g.
"Monoid" or "Traversable". Types could be associated with metadata, such as
statistical generative models.

Speaking of statistical generative models, most types should have one. If we
can simulate data for all inputs to a function, then we can automatically test
the function, generate sample data, and build simulation-based performance
models. Given performance models, the compiler can reason about the performance
of the overall system, allowing estimation of runtime given inputs and smart
optimizations.

Overall, I want to give the compiler what it needs so that it can reason about
the code and automate away the tedium of programming.
