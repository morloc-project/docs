# algebraic effects
@article{Leijen_2014,
   title={Koka: Programming with Row Polymorphic Effect Types},
   volume={153},
   ISSN={2075-2180},
   url={http://dx.doi.org/10.4204/EPTCS.153.8},
   DOI={10.4204/eptcs.153.8},
   journal={Electronic Proceedings in Theoretical Computer Science},
   publisher={Open Publishing Association},
   author={Leijen, Daan},
   year={2014},
   month={Jun},
   pages={100–126}
}

# Statically check contracts/refinements when possible, if undecidable, then generate a dynamic contract check
@inproceedings{xu2012hybrid,
  title={Hybrid contract checking via symbolic simplification},
  author={Xu, Dana N},
  booktitle={Proceedings of the ACM SIGPLAN 2012 workshop on Partial evaluation and program manipulation},
  pages={107--116},
  year={2012}
}

@article{vazou2018,
  title={Theorem proving for all: equational reasoning in liquid Haskell (functional pearl)},
  author={Niki Vazou and Joachim Breitner and Rose Kunkel and D. Horn and G. Hutton},
  journal={Proceedings of the 11th ACM SIGPLAN International Symposium on Haskell},
  year={2018}
}

@article{waldmann2018,
  title={When You Should Use Lists in Haskell (Mostly, You Should Not)},
  author={J. Waldmann},
  journal={ArXiv},
  year={2018},
  volume={abs/1808.08329}
}

@inproceedings{hempel2019sketch,
  title={Sketch-n-Sketch: Output-Directed Programming for SVG},
  author={Hempel, Brian and Lubin, Justin and Chugh, Ravi},
  booktitle={Proceedings of the 32nd Annual ACM Symposium on User Interface Software and Technology},
  pages={281--292},
  year={2019}
}

@inproceedings{hudak2007history,
  title={A history of Haskell: being lazy with class},
  author={Hudak, Paul and Hughes, John and Peyton Jones, Simon and Wadler, Philip},
  booktitle={Proceedings of the third ACM SIGPLAN conference on History of programming languages},
  pages={12--1},
  year={2007}
}

@phdthesis{jones1992qualified,
  title={Qualified types: theory and practice.},
  author={Jones, Mark Philip},
  year={1992},
  school={University of Oxford}
}

@inproceedings{jones1992theory,
  title={A theory of qualified types},
  author={Jones, Mark P},
  booktitle={European symposium on programming},
  pages={287--306},
  year={1992},
  organization={Springer}
}

@inproceedings{jones1995simplifying,
  title={Simplifying and improving qualified types},
  author={Jones, Mark P},
  booktitle={Proceedings of the seventh international conference on Functional programming languages and computer architecture},
  pages={160--169},
  year={1995}
}

@techreport{jones1993coherence,
  title={Coherence for qualified types},
  author={Jones, Mark P},
  year={1993},
  institution={Technical Report YALEU/DCS/RR-989, Yale University}
}

@inproceedings{jones2000fundeps,
  title={Type classes with functional dependencies},
  author={Jones, Mark P},
  booktitle={European Symposium on Programming},
  pages={230--244},
  year={2000},
  organization={Springer}
}

@article{backus1978,
  title={Can programming be liberated from the von Neumann style? A functional style and its algebra of programs},
  author={Backus, John},
  journal={Communications of the ACM},
  volume={21},
  number={8},
  pages={613--641},
  year={1978},
  publisher={ACM New York, NY, USA}
}

@inproceedings{aiken1994soft,
  title={Soft typing with conditional types},
  author={Aiken, Alexander and Wimmers, Edward L and Lakshman, TK},
  booktitle={Proceedings of the 21st ACM SIGPLAN-SIGACT symposium on Principles of programming languages},
  pages={163--173},
  year={1994}
}

@article{bierman2010semantic,
  title={Semantic subtyping with an SMT solver},
  author={Bierman, Gavin M and Gordon, Andrew D and Hri{\c{t}}cu, C{\u{a}}t{\u{a}}lin and Langworthy, David},
  journal={ACM Sigplan Notices},
  volume={45},
  number={9},
  pages={105--116},
  year={2010},
  publisher={ACM New York, NY, USA}
}

@inproceedings{dunfield2013complete,
  title={Complete and easy bidirectional typechecking for higher-rank polymorphism},
  author={Dunfield, Joshua and Krishnaswami, Neelakantan R},
  booktitle={ACM SIGPLAN Notices},
  volume={48},
  number={9},
  pages={429--442},
  year={2013},
  organization={ACM}
}

@inproceedings{vytiniotis2010let,
  title={Let should not be generalized},
  author={Vytiniotis, Dimitrios and Peyton Jones, Simon and Schrijvers, Tom},
  booktitle={Proceedings of the 5th ACM SIGPLAN workshop on Types in language design and implementation},
  pages={39--50},
  year={2010},
  organization={ACM}
}

@article{wadler2003prettier,
  title={A prettier printer},
  author={Wadler, Philip},
  journal={The Fun of Programming, Cornerstones of Computing},
  pages={223--243},
  year={2003},
  publisher={Citeseer}
}

@article{leijen2006pprint,
  title={PPrint, a prettier printer},
  author={Leijen, Daan},
  year={2006}
}

// SWLR is roughly the union of description logic and rule-based logic (OWL and Datalog)
@article{parsia2005cautiously,
  title={Cautiously approaching SWRL},
  author={Parsia, Bijan and Sirin, Evren and Grau, Bernardo Cuenca and Ruckhaus, Edna and Hewlett, Daniel},
  journal={preprint submitted to Elsevier Science},
  pages={3},
  year={2005}
}

@inproceedings{bosch2015guidance,
  title={Guidance, please! towards a framework for RDF-based constraint languages},
  author={Bosch, Thomas and Eckert, Kai},
  booktitle={International Conference on Dublin Core and Metadata Applications},
  pages={95--111},
  year={2015}
}

@inproceedings{stuckey2006type,
  title={Type processing by constraint reasoning},
  author={Stuckey, Peter J and Sulzmann, Martin and Wazny, Jeremy},
  booktitle={Asian Symposium on Programming Languages and Systems},
  pages={1--25},
  year={2006},
  organization={Springer}
}

@inproceedings{memarian2016into,
  title={Into the depths of C: elaborating the de facto standards},
  author={Memarian, Kayvan and Matthiesen, Justus and Lingard, James and Nienhuis, Kyndylan and Chisnall, David and Watson, Robert NM and Sewell, Peter},
  booktitle={ACM SIGPLAN Notices},
  volume={51},
  number={6},
  pages={1--15},
  year={2016},
  organization={ACM}
}

@inproceedings{brady2006ivor,
  title={Ivor, a proof engine},
  author={Brady, Edwin},
  booktitle={Symposium on Implementation and Application of Functional Languages},
  pages={145--162},
  year={2006},
  organization={Springer}
}

// invariants in Haskell
@inproceedings{vazou2014liquidhaskell,
  title={Liquidhaskell: Experience with refinement types in the real world},
  author={Vazou, Niki and Seidel, Eric L and Jhala, Ranjit},
  booktitle={ACM SIGPLAN Notices},
  volume={49},
  number={12},
  pages={39--51},
  year={2014},
  organization={ACM}
}

@article{almendros2011prolog,
  title={A prolog-based query language for OWL},
  author={Almendros-Jim{\'e}nez, Jes{\'u}s M},
  journal={Electronic Notes in Theoretical Computer Science},
  volume={271},
  pages={3--22},
  year={2011},
  publisher={Elsevier}
}

// Related work: Semantic function database in R
@inproceedings{neveu2010using,
  title={Using ontologies of software: example of R functions management},
  author={Neveu, Pascal and Domerg, Caroline and Fabre, Juliette and N{\`e}gre, Vincent and Gennari, Emilie and Tireau, Anne and Corby, Olivier and Faron-Zucker, Catherine and Mirbel, Isabelle},
  booktitle={International Workshop on Resource Discovery},
  pages={43--56},
  year={2010},
  organization={Springer}
}

// Reference: Comparison of ontology versus rules. Shows some good reasons why
// an ontology is more appropriate for my semantic type system.
@article{czarnecki2013ontologies,
  title={Ontologies vs. Rules—Comparison of Methods of Knowledge Representation Based on the Example of IT Services Management},
  author={Czarnecki, Adam and Sitek, Tomasz},
  journal={Information Systems Architecture and Technology: Intelligent Information Systems, Knowledge Discovery, Big Data and High Performance Computing},
  pages={99--109},
  year={2013}
}

// Protege: A tool for makeing OWL ontologies
// Protege-OWL supports qualified cardinality restrictions (QCRs) as `owl:valuesFrom`, which goes beyong OWL DL.
@inproceedings{knublauch2005protege,
  title={The Protege OWL Experience.},
  author={Knublauch, Holger and Horridge, Matthew and Musen, Mark A and Rector, Alan L and Stevens, Robert and Drummond, Nick and Lord, Phillip W and Noy, Natalya Fridman and Seidenberg, Julian and Wang, Hai},
  booktitle={OWLED},
  year={2005}
}

// This is a fantastic little article, introduces the relations between DL and
// other systems. Compact info.
@misc{ wiki:Description_logic,
  author = {{Description logic}},
  title = "Description logic --- {W}ikipedia{,} The Free Encyclopedia",
  year = "2017",
  url = "https://en.wikipedia.org/wiki/Description_logic",
  note = "[Online; accessed 28-December-2017]"
}

// Link between category theory and ontology. Category theory is the far more
// general field, with many results possibly transferable to ontology.
@article{krotzsch2005category,
  title={Category theory in ontology research: Concrete gain from an abstract approach},
  author={Kr{\"o}tzsch, Markus and Hitzler, Pascal and Ehrig, Marc and Sure, York},
  journal={Karlsruhe, Germany, Institut AIFB, Universit{\"a}t Karlsruhe},
  volume={6},
  year={2005}
}

@article{de2010chebi,
  title={ChEBI: a chemistry ontology and database},
  author={de Matos, Paula and Dekker, Adriano and Ennis, Marcus and Hastings, Janna and Haug, Kenneth and Turner, Steve and Steinbeck, Christoph},
  journal={Journal of cheminformatics},
  volume={2},
  number={S1},
  pages={P6},
  year={2010},
  publisher={Springer}
}

@article{krotzsch2012description,
  title={A description logic primer},
  author={Kr{\"o}tzsch, Markus and Simancik, Frantisek and Horrocks, Ian},
  journal={arXiv preprint arXiv:1201.4089},
  year={2012}
}

// The DIG 2.0 format for passing data to DL reasoners
@inproceedings{turhan2006dig,
  title={DIG 2.0--towards a flexible interface for description logic reasoners},
  author={Turhan, Anni-Yasmin and Bechhofer, Sean and Kaplunova, Alissa and Liebig, Thorsten and Luther, Marko and M{\"o}ller, Ralf and Noppens, Olaf and Patel-Schneider, Peter and Suntisrivaraporn, Boontawee and Weith{\"o}ner, Timo},
  booktitle={Proc. of the OWL Experiences and Directions Workshop at the ISWC},
  volume={6},
  year={2006}
}

// The HermiT reasoner seems to be the fastest and most popular reasoner at the
// moment. A downside is that it is in Java and introduces a lot of extra
// dependencies. I would like something in Haskell, of course.
@article{glimm2014hermit,
  title={HermiT: an OWL 2 reasoner},
  author={Glimm, Birte and Horrocks, Ian and Motik, Boris and Stoilos, Giorgos and Wang, Zhe},
  journal={Journal of Automated Reasoning},
  volume={53},
  number={3},
  pages={245--269},
  year={2014},
  publisher={Springer}
}

// Ideas on which Hamilton based 001AXES and Universal System Language 
@article{hamilton1976higher,
  title={Higher order software—A methodology for defining software},
  author={Hamilton, Margaret and Zeldin, Saydean},
  journal={IEEE Transactions on Software Engineering},
  number={1},
  pages={9--32},
  year={1976},
  publisher={IEEE}
}
