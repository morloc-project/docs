
=== Primitives and containers

```
data : True | False
     | number
     | string
     | [data, ...]       -- lists
     | (data, ...)       -- tuples
     | {x = data, ...}   -- records
```

As for as `morloc` is concerned, `number` is of arbitrary length and precision.
Strings are double quoted and support escapes. In the future, I will add
support for string interpolation.

=== Semicolons and whitespace

Currently, `morloc` requires semicolons at the ends of expressions. Semicolons
will always be supported in `morloc`, but I consider them ugly and an
unnecessary syntax error source, so I will eventually remove them (as soon as I
can figure out how to do so in the parser).

=== Functions

Function definition follows Haskell syntax.

[source,haskell]
----
foo x = g (f x)
----

I currently have no support for infix operators, but will in the future. Also,
I do not yet support eta reduction.

=== Type signatures

General type declarations roughly follow Haskell syntax:

[source,haskell]
----
take :: Int -> List a -> List a
----

Where `a` is a generic type variable. I support `[a]` as sugar for `List a`.

Concrete type declarations describe the type of the function in a specific language:

[source,haskell]
----
take Cpp :: "int" -> "std::vector<$1>" a -> "std::vector<$1>" a
----

This signature describes a `C++` function with arguments types `int` and a
`std::vector` storing generic values. The `$1` will be replaced by the `C++`
type inferred for `a` when the target `C++` code is generated. For example,
`"std::vector<$1>" int` would translate to `std::vector<int>`.

For languages that do not have parameterized types, such as Python, the type
signature for `take` might be:

[source,haskell]
----
take Py :: "int" -> "list" a -> "list" a
----

The `"list" a` types would translate to simply `list` in Python.

=== Sourcing functions

Sourcing a function from a foreign language is done as follows:

[source,haskell]
----
source Cpp from "foo.h" ("mlc_foo" as foo) 

foo :: A -> B
foo Cpp :: "int" -> "std::string" 
----

Here we state that we are importing the function `mlc_foo` from the `C++`
source file `foo.h` and calling it `foo`. We then give its general and concrete
types.

Currently `morloc` treats language-specific functions as black boxes. The
compiler does not parse the `C++` code to insure the type the programmer wrote
is correct (this may be possible in the future).

=== Type defaults

`morloc` stores default primitive and basic container types for each supported
language. In most languages, there is a sensible default type for reals,
integers, bools, lists, tuples, and maybe records. Many languages will not
distinguish between lists and tuples. Some languages have dynamic records
(python and R) and others require the generation of type definitions (C++ and
Haskell). These defaults simplify type definitions, allowing use to write `[a]`
in place of the `C++` type `"std::vector<$1>" a`.

=== Type aliases

`morloc` supports type aliases as a syntactic sugar that disapears before the
typechecking step.

[source,haskell]
----
type (Pairlist a b) = [(a,b)]
type Cpp (Pairlist a b) = [(a,b)]
----

=== Records, objects, and tables

`records`, `objects` and `tables` are all defined with the same syntax (for
now) but have subtly different meanings.

A `record` is a named, heterogenous list such as a `struct` in C, a `dict` in
Python, or a `list` in R. The type of the record exactly describes the data
stored in the record (in contrast to parameterized types like `[a]` or `Map a b`).

A `table` is like a record where all types are replaced by lists of that type.
But `table` is not just syntactic sugar for a record of lists, the `table`
annotation is passed with the record through the compiler all the way to the
translator, where the language-specific serialization functions may have
special handling for tables.

An `object` is a record with baggage. It is a special case of an OOP class
where all arguments passed to the constructor can be accessed as public fields.

All three are defined in similar ways.

[source,haskell]
----
record (PersonRec a) = PersonRec {name :: Str, age :: Int}
record Cpp (PersonRec a) = "MyObj" {name :: Str, age :: Int}

table (PersonTbl a) = PersonObj {name :: Str, age :: Int}
table R (PersonTbl a) = "data.frame" {name :: Str, age :: Int}
table Cpp (PersonTbl a) = "struct" {name :: Str, age :: Int}

record (PersonRec a) = PersonRec {name :: Str, age :: Int}
object Cpp (PersonRec a) = "MyObj" {name :: Str, age :: Int}
----

Notice that `object` is undefined for general types, since they don't check
luggage. Also note the difference between the type constructor (e.g.
`PersonRec`) and the data constructor (e.g., `"MyObj"`). The latter corresponds
to the class constructor in the OOP language.

=== Modules

A module includes all the code defined under the `import <module_name>`
statement. It can be imported with the `import` command.

The following module defines the constant `x` and exports it.

[source,haskell]
----
module Foo
x = 42
export x
----

Another module can import `Foo`:

[source]
----
import Foo (x)

...
----

A term may be imported from multiple modules. For example: 

[source,haskell]
----
module Add
import cppbase (add)
import pybase (add)
import rbase (add)

export add
----

This module imports that `C++`, Python, and R `add` functions and exports all
of them. Modules that import `add` will import three different versions of the
function. The compiler will choose which to use.

=== Core libraries

Each new language will have a base library that rougly corresponds to the
Haskell prelude. They will have functions for mapping over lists, working with
strings, etc. They will also contain standard type aliases for each language.
For example, `type Cpp Int = "std::string"`.
