== Pieces

.Compiler
given an ontology, database of typed functions, and an application, it
generates code to allow the functions to talk across languages and builds a
nexus to integrate them.

.Environment
`morloc` is intended to allow tools and languages to be interoperable. The user
should be able to import a function from any language and expect it to run. For
this to work, the compiler needs to have the languages and tools installed. The
user should not have to install all this.  Instead, they work through Docker.
Inside the Docker image, everything they need is present. When a new program is
installed, the code is sent to the docker image, everything is built in there
and run in there. The local executable is an API to the docker image. Or
something. I seriously need to prototype this.

.Semantic type system (STS)
a language for ascribing sufficient semantic information to data and functions
that an AI can automate every sort of tedious work.

.Knowledgebase

.Packager
A knowledge-base describing the relations between all data types and storing
all functions.
