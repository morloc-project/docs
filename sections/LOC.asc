The core of a computational workflow is a network of data-transforming
functions. These functions are often simple and elegant, but composing them
into a full program -- which involves input/output linking, type conversions,
error catching and handling, report generation, file management, caching and
parallelization, etc -- quickly bloats the code, which slows development and
complicates modification. Furthermore, workflows are often multi-lingual or
invoke external programs, and thus require writing tedious linking code. To
address these issues, we present a new language: `morloc`.

`morloc` composes functions from other languages (e.g. Bash, R, Python) into
multi-lingual workflows. A `morloc` script is partitioned into sections.
Everything needed to understand the flow of data is written in one section.
Effects, checks and other details are written in their own sections. Adding an
effect to a function cannot alter the output of the function. Adding a check
can only switch the output of a function into a failed state. In this way, a
programmer can safely query the internal data of a program, modify the
generated reports, and add or remove checks and debugging statements.

Another central goal of `morloc` is to unify languages through a common
ontology of types. A pure function can be described completely in terms what
data comes in (input types) and what data comes out (output type). In `morloc`,
functions are explicitly typed (as in Haskell). Based on these types, the
compiler generates any required linking code and checks the high-level
correctness of the program. Rather than implementing ad hoc linking code, the
`morloc` programmer tells the `morloc` compiler the function signature, and the
compiler does the rest.

Overall, `morloc` can 1) simplify development, 2) allow easy and safe
extensions, 3) allow transparent validation, 4) seamlessly link between
languages and 5) provide a basis for a universal database of functions.
`morloc` will be useful in developing readable, flexible, modular and
extensible programs.

Data analysis workflows often are multilingual, have many inputs, and require
rigorous quality control and report generation. While the functions from which
they are built may be simple and elegant, the whole quickly becomes more
bloated than sum of the parts. We present a new workflow language, `morloc`,
which composes workflows from typed functions exapted from supported languages.
The programmer specifies function types and connectivity, while the compiler
generates all boilerplate for interfacing between languages. `morloc` allows
a layered development strategy. Where the abstract workflow and function types
are specified first. These may remain unchanged as functions are subsequently
defined, assertions on inputs added, and probes attached. We provide early
evidence of `morloc`â€™s potential to simplify development of data analysis
workflows, enable easy extension and validation, and seamlessly link between
languages in a single workflow.

This is a much needed ability. Currently there is a massive code duplication
problem, with libraries and wrappers for libraries and whole classes of
problems reimplemented in every language. For example, in bioinformatics we
have Bioperl, Biopython, Bioconductor, BioC, BioHaskell, Biojava, etc.; all
programs which cover the same functionality.
