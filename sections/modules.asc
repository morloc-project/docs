
== Modules

How is new code wrapped and given to Morloc?

Everything goes into RDF. That is the inviolate rule. But triples are an
awkward way to write data for a human, so we offer Morloc script. So, where do
module details, such as author info and such, go?

Maybe a `morloc.yaml` file. This single file would uniquely identify the
contents of a folder as a morloc module.

The downside, is that that ties the config file to a specific format, YAML, and
to a single file. Better to use a folder where all Morloc related info is
witten. This could be sugar forms (e.g. anything that is not RDF). Or it could
be local mods, whatever. This would be a little like the Python convention of
having a `__python__` folder.

Putting `__morloc__` in a folder automatically turns the contents into a morloc
module, even if the folder is empty.  

Since morloc is designed to work with any language, we don't want to have loose
files hanging around in the same folder with the source. So there could be
a `__source__` folder for holding all non-morloc source code. This code would
be compiled or loaded by morloc. It would contain whatever is conventional for
packages in the given language.

No, let's avoid new conventions. The `.loc` file has a relative path to any
source code that is used, so requiring a `__source__` folder is silly. The
`__morloc__` folder sounds nice, but I would want the top folder in a module to
contain a README. And if I have a README here, I might as well have the module
metadata. And I might as well have the loc file. Thus, everything in the
__morloc__` folder might as well be moved up to the top folder. Then for
source, if I have it in a dedicated `__source__` folder, and the name of that
folder is hardcoded, then I'll have to everywhere account for it. Meh, mess.
So, just a simple package of this form (for module `foo`):

```
 \foo
   README.md
   package.yaml
   main.loc
   whatever.py
```

Where `main.loc` will identify `whatever.py` as its source. The `package.yaml`
file may identify something other than `main.loc` as the main morloc file. It
may refer to something other than the README.md file as module documentation.
