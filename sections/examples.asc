== Code Examples

`morloc` can compose functions across languages. For example

```
import math (fibonacci)
import rbase (plotPDF)

export fibplot

fibplot n = plotPDF (fibonacci n) "fibonacci-plot.pdf";
```

The `fibplot` function calculates Fibonacci numbers using a C++ function and
plots it using an R function.

`plotPDF` is defined in the `morloc` module `rbase`. The `morloc` module
contains the following files:

```
README.md
package.yaml
main.loc
core.R
rbase.R
```

The `main.loc` file contains `morloc` function signatures, compositions, and
export statements. The `core.R` and `rbase.R` files contain R source code.
`rbase.R` contains the general serialization functions required for R
interoperability with other languages. The `core.R` file contains mostly core
utilities that are common between languages (`map`, `zip`, `fold`, `add`,
`sub`, etc). It also contains a wrapper around the useful (though a bit ugly)
generic R plot function: `plotPDF`:

``` R
plotPDF <- function(x, filename){
  pdf(filename)
  plot(x)
  dev.off()
}
```

This is a perfectly normal R function with now extra boilerplate. It takes an
arbitrary input `x` and a filename, passes `x` to the generic plot function,
and writes the result to a PDF with the name `filename`.

The `main.loc` file contains the type signatures for this function:

```
plotPDF :: forall a . a -> Str -> ()
plotPDF R :: forall a . a -> character -> ()
```

The first signature is the general type, the second is the concrete, R-specific
type. The `forall a` states that `a` is a generic variable.

Similarly the `fibonacci` `C++` function has the types:

```
fibonacci :: Num -> List Num 
fibonacci Cpp :: "size_t" -> "std::vector<$1>" double;
```

The general type, `Num -> List Num`, takes a number and returns a list of
numbers.  The only general constraint on `Num` is that it be rational. In
serialized form (e.g., in JSON), it is represented as a decimal number of
arbitrary size and precision. The concrete type signature _aligns_ to the
general one in that it must be a function of the same number of arguments and
any parameterized types must have the same number of parameters (and so on down
recursively into the type). `"std::vector<$1>" double` aligns to `List Num` (or
equivalently, `[Num]`). The type that is used in `C++` prototypes and type
annotations is generated from the concrete type via macro expansion into the
type constructor: `double` replaces `$1` yielding the concrete type
`std::vector<double>`. The use of `double` isn't ideal, since Fibonacci
sequences are integers, but was done to support larger outputs without overflow
(might be better to go with log Fibonacci numbers).

A Haskell programmer might take issue with the generic plot function (can it
really plot _anything_). Eventually I will add type machinery for adding
further constraints, but even after such systems are in place, it is essential
that `morloc` give some amount of flexibility to dynamic languages such as R.
In the future, I imagine the `morloc` universe will partition into planes of
differing strictness and performance. Some programmers will care about function
totality and static guarantees, others will trade this for ease of use or
familiarity.
