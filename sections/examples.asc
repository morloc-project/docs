
=== Hello world!

```
export hello
hello = "Hello World"
```

The "export" keyword exports the variable "hello" from the module.

Paste this into a file (e.g. "hello.loc") and then it can be imported by other
`morloc` modules or directly compiled into a program where every exported term
is a subcommand.

```
morloc make hello.loc
```

This will generate a single file named "nexus.pl". The nexus is the executable
script that the user will interact with. For this simple example, it is the
only generated file. It is currently written in Perl. 

Calling "nexus.pl" with no arguemtns or with the `-h` flag, will print a help
message:

```
$ ./nexus.pl -h
The following commands are exported:
  hello [0]
```

The `[0]` states the number of arguments the "command" hello takes.

The command is called as so:

```
$ ./nexus.pl hello
Hello World
```

=== Single langage function composition

The following code uses only C++ functions (`fold`, `map`, `add` and `mul`). 

```
import cppbase (fold, map, add, mul)

export square
export sumOfSquares

square x = mul x x

sumOfSquares xs = fold add 0 (map square xs)
```

If this script is pasted into the file "example-1.loc", it can be compiled as
follows:

```sh
morloc install cppbase
morloc make example-1.loc
```

The `install` command clones the `cppbase` repo from github into the
local directory `~/.morloc/lib`. The `make` command will generate a file named
`nexus.pl`, which is an executable interface to the exported functions.

You can see the exported functions and the number of arguments they take:

```sh
$ ./nexus.pl
The following commands are exported
  square [1]
  rms [1]
```

Then you can call the exported functions:

```sh
$ ./nexus.pl sumOfSquares [1,2,3]
14
```

The `nexus.pl` executable dispatches the command to the compiled C++ program, `pool-cpp.out`.


=== Composition between languages

`morloc` can compose functions across languages. For example


```
import math (fibonacci)
import rbase (plotVectorPDF, ints2reals)

export fibplot

fibplot n = plotVectorPDF (ints2reals (fibonacci n)) "fibonacci-plot.pdf"
```

The `fibplot` function calculates Fibonacci numbers using a C++ function and
plots it using an R function.

`plotVectorPDF` is defined in the `morloc` module `rbase`. The `morloc` module
contains the following files:

```
README.md
package.yaml
main.loc
core.R
rbase.R
```

The `main.loc` file contains `morloc` function signatures, compositions, and
export statements. The `core.R` and `rbase.R` files contain R source code.
`rbase.R` contains the general serialization functions required for R
interoperability with other languages. The `core.R` file contains mostly core
utilities that are common between languages (`map`, `zip`, `fold`, `add`,
`sub`, etc). `ints2reals` is an alias for the base R function `as.numeric`.
`plotPDF` is a wrapper around the generic R plot function, as shown below:

``` R
plotVectorPDF <- function(x, filename){
  pdf(filename)
  plot(x)
  dev.off()
}
```

This is a perfectly normal R function with no extra boilerplate. It takes an
arbitrary input `x` and a filename, passes `x` to the generic plot function,
and writes the result to a PDF with the name `filename`.

The `main.loc` file contains the type signatures for this function:

```
plotVectorPDF :: [Num] -> Str -> ()
plotVectorPDF R :: [numeric] -> character -> ()
```

The first signature is the general type, the second is the concrete, R-specific
type.

Similarly the `fibonacci` `C++` function has the types:

```
fibonacci :: Int -> List Int
fibonacci Cpp :: "size_t" -> "std::vector<$1>" size_t
```

The general type, `Int -> List Int`, describes a function that takes an integer
and returns a list of integers. `List Int` could be written equivalently as
`[Int]`. The concrete type signature _aligns_ to the general one in that it
must be a function of the same number of arguments and any parameterized types
must have the same number of parameters (and so on down recursively into the
type). `"std::vector<$1>" size_t` aligns to `List Int` (or equivalently,
`[Int]`). The type that is used in `C++` prototypes and type annotations is
generated from the concrete type via macro expansion into the type constructor:
`size_t` replaces `$1` yielding the concrete type `std::vector<size_t>`.

The fibonacci function itself is a normal C++ function with the prototype: 

``` C++
std::vector<size_t> fibonacci(size_t n)
```
