
=== Generating user interfaces

There are several types of user interfaces:

 * A command line utility
 * A programming library
 * A web API (e.g., a REST interface)
 * A browser or cellphone app
 * A graphical user interface on a PC

I will go through each of these in detail, but first there are a few missing
features from morloc that will be required to generate any of these.

**parameterization**. Currently all function arguments are positional. This can
work fine in languages like Haskell, where parameterization is usually passed
in either a Reader monad or a record. But in languages like Python or R, and in
command line utilities and node-based programming frameworks (like Blender
shader specifications), positional arguments and parameters are dealt with
differently. One solution would be to add all parameters as a record in the
first positional argument. The record would be interpreted as the list of
keyword arguments in languages that support them and would be treated as a
normal record in languages that don't.

**passing by filename**. Passing data between languages in JSON form is
convenient, but limited. Binary data, such as images or music, would better be
passed as files or binary globs. Large data that is not in memory would better
passed as files or references to database objects. Any data that is threaded
through a pool, but not directly used, should be passed as reference to avoid
unnecessary (de)serialization.

**Documentation**. There is nothing novel that needs to be done here. I just
need a basic Don Knuth literate programming system similar to Javadocs, Hadock
and every other programming language. I'll probably model my system after
Haddock. The documentation can be leveraged into man pages and usage statements
for the CLI utilities, transferred as documentation in programmatic libraries,
built into docs for web APIs, GUIs, and everything else.


I'll will walk through each of these and outline what morloc *should* do with respect to generating the UI. 

.Command line utility

This is what `morloc` currently generates. Command line utilities are deeply
formulaic and many frameworks exist to generate them from minimal documentation
and type annotations. What is currently missing from morloc-generated CLI is
clean handling for parameters (flags, keyword arguments), passing data by
"reference" (through filenames), conventions for STDIN/STDOUT/STDERR
piping, and a documentation system.

Modules that are intended to be used as CLI tools (or other UIs) will probably
be written in a different style than modules intended to be used as libraries.
The key difference is that the functions in modules that will be compiled into
UIs will usually be called directly rather than composed together. CLIs often
have many flags and parameters that direct branching determining which function
to call.

Below is an example that illustrates this idea:

[source,haskell]
----------------------------------------------------
import bio (aligner)

type AlignmentFormat = s:String where
    s in {"fasta", "clustalw", "stockholm"}

type SequenceFormat = s:String where
    s in {"fasta", "twobit"}

parameter AlignOpt =
  { "output-format|o" :: AlignmentFormat ? "fasta"
  , "intput-format|i" :: SequenceFormat ? "fasta"
  }

align :: AlignOpt -> Filename -> () Filename
align opt fi fo = writer (aligner (reader fi)) fo where
    reader = case opt["input-format"] of
        "fasta" -> readFasta
        "twobit" -> readTwoBit
    writer = case opt["output-format"] of
        "fasta" -> writeFasta
        "clustalw" -> writeClustalW
        "stockholm" -> writeStockholm
----------------------------------------------------

Here the generated command line tool has options for specifying the input and
output formats of the sequence files. This approach would not normally be used
in a library, since it would be easier to just export all the readers and
writers and let the user compose them.

The example also uses some experimental syntax that is not yet implemented in
morloc. The records have default values `? "fasta"` and specify short options
`|o` in the string key names. The "record" is also not a record, but rather a
string map.


[source,haskell]
----------------------------------------------------
parameter NormOpt =
  { "verbose|v" :: Bool ? False
  , "mean|m" :: Num ? 0
  , "stddev|s" :: Num ? 1
  }

norm :: NormOpt -> i:Int -> [Num]_{i}

quiet_norm = norm (NormOpt / {verbose = False})
----------------------------------------------------

Here `quiet_norm` will have the type:


[source,haskell]
----------------------------------------------------
quiet_norm :: {"mean|m" :: Num ? 0, "stddev|s" :: Num ? 1} -> i:Int -> [Num]_{i}
----------------------------------------------------

Why use "/" for partial application? Because dividing by a term removes
it from an equation.

Another example where output type varies with parameter


.Programmatic library

This is easy. Already morloc generates the pools for each language and the
manifold nexus calls the pools. Generating a library that can be imported into
other languages is actually an easier problem. The compiler would fix the first
call in each exported composition to the desired target language. Then
typechecking and intermediate representation generation would proceed as it
currently does. The final code generation step would not generate a manifold
nexus and instead just make the one-language pool. It might need to generate a
little more package boilerplate than is currently required, but this is usually
pretty formulaic, all info required for this process is already in the system.
Almost, the programmer meta-data is currently missing. That is, the author,
maintainer, copyright, license information and such. But this is an easy thing
to add.
