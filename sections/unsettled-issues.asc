
== Unsettled issues 

There are many issues that need to be resolved before `morloc` is ready for
widespread use. 

=== Support for lazy evaluation

Many languages support lazy evaluation, either by default (e.g., Haskell and
R), by using special syntax (e.g., Python), or using system streaming utilities
(e.g. pipelines in Bash). `morloc` should support this as well. Doing so is
fairly easy for calls within a language, but can and should this be supported
for calls between languages?

=== Purity, totallity and planes

.Should functions be pure?  I certainly cannot, and should not, guarantee that
all functions are pure. One possibility is adding (or inferring) a tag for
purity. This could potentially be automatically tested by running the function
within a sandbox or through static evaluation. Then `morloc` programmers and
library builders can require all functions be pure.

.Should functions be total? Again, not in general and again this could be a
tag. In this case, some users, particularly of the Haskell persuation, might
want to only work on the `morloc` "plane of totality". 

Perhaps what we need is a strict subset of `morloc`. Well, there will be layers.
And functions will be ascend through the levels of quality, from unverified to
proven. Though quality is not a one-dimensional trait. There is

 * correctness (ranging from unverified to levels of test to proven)

 * asymptotic time and space complexity (ranging from unverified, then through
   a range of equations, bound perhaps by a proven form).

 * there is code quality (which is somewhat subjective, but perhaps with "human vetted" on top)

 * codebase size (remove comments and count the tokens)

 * for some functions, there can be other quality metrics (accuracy, AUC, energy, etc)

 * documentation (which is very subjective)

 * purity (TRUE | FALSE) 

 * pairwise suitability to other functions (whatever that means)

=== Handling ontology conflicts

Should there be one central authority for types, or many systems? We will
eventually begin studying millions of compositions of functions to learn how
the functions are used and what they mean. We want ontologies and rulesets to
be reusable, which favors a central authority. However, we also want them to be
flexible and to evolve freely, which favors decentralization. We will need to
be able to merge ontologies and rulesets, identify equivalent terms and
redundant rules, and automatically update programs. We will need to allow
conflicting rules and ontologies to co-exist so long as they do not interact. 

=== Polymorphism

Monolithic tools often do not resolve cleanly into a single type. This is
especially true of standalone tools. But it is also true of many functions in
dynamic languages. The problem is that they may have many possible types of
input and output.

 * input type depends on parameters
 * input type depends on input value (ad hoc polymorphism)
 * output type depends on parameters
 * output type depends on input value
 * output type depends on output value
 * cardinality of input depends on parameters
 * and more

Enumerating all combinations of types would be a naming nightmare. 

Allowing function overloading reduces this problem somewhat.

We could infer the output type, then attempt to cast it to the expected output
type. For example, suppose we have a function that returns a list of integers
if the list is longer than 1 and a single integer otherwise. `morloc` could
generate a code in the manifold that checks the type of the output function,
then casts it as needed.

Some of these issues may need to be solved by workarounds in the wrapper (such
as hard-coding certain parameters or processing the output or input).

One way to solve this is to consider the tool's function signature as a graph
of types, rather than a singular entity.


=== Handling effects

A function maps data from one form to another. Where do effects, like writing
something to a database, creating a file, showing a plot, or running an
application fit in?

For example, what is the type signature of a histogram function?

```
histogram :: [Num] -> ?   
```

We can delay visualization, keeping things in the pure realm a little longer,
by converting the vector of numbers to bins:


```
histogram :: [Num] -> [Rectangle]
```

While this conveniently decouples the histogram algorithm from the
visualization, it doesn't solve the problem. We still want to make an image.

We could allow the effect to run and return the filename

```
histogram :: [Num] -> Filename
```

Though `Filename` is fairly ad hoc. Is this a PDF? Or a PNG? Perhaps here
parameterized types would be worthwhile. Where `Path PDF` implies a filename
reference to the PDF is being passed (alternatively `Bytestream PDF`). Or
perhaps just `PDF`, where `PDF` is a complex representation of the PDF vector
object (see the 700 page reference manual) that will be converted into an
appropriate data structure (e.g. PDF object) in the target language.

```
histogram :: [Num] -> Path PDF
histogram :: [Num] -> Bytestream PDF
histogram :: [Num] -> PDF
```

But this still does not capture the fact that a file was created. More clearly,
imagine a robotic function that calculates a movement vector from the original
position, moves the robot, and then returns the new position. The signature
might be:

```
literallyMove :: Position -> Vector -> Position
```

But this does not capture the fact that the function is also causing an effect
(making the robot move).

In old `morloc`, I have support for `Void` types, which roughly indicate IO. So
we could couple two function:

```
calculateMove :: Position -> Vector
moveRobot :: Vector -> Void
moveRobot $ calculateMove (1.1, 3.4)
```

Perhaps we can leave Void as Void, for the base type, then expound upon it
semantically. Perhaps with a prefix to indicate effect, e.g.:

```
-- using '!', I'd want to think more before settling
moveRobot :: Vector -> !MoveRobot
```

Now of course, in Haskell we would solve this with an IO monad. Do we want
monads? But we really can't pretend to be pure, since the functions are black
boxes. And even if we could be pure, would we want to be? `morloc` needs to allow
effects. Otherwise Haskell would be about the only major language it could
support.

Conclusion: for now I lean towards specialized Void.
