
The input to the code generator is a list of module records.

[source, haskell]
----
   Module
    { moduleName :: MVar                            -- module name
    , modulePath :: Maybe Path                      -- local path to module
    , moduleBody :: [Expr]                          -- full source code
    , moduleExports :: Set EVar                     -- exported morloc variables
    , moduleImports :: [Import]                     -- imported morloc modules
    , moduleImportMap :: Map EVar MVar              -- local term to import map
    , moduleSourceMap :: Map (EVar, Lang) Source    -- foreign language sources
    , moduleTypeMap :: Map EVar TypeSet             -- type of every variable
    , moduleDeclarationMap :: Map EVar Expr         -- all morloc declarations
    }
----

== Root

The first step is to find the modules that are imported by no other module,
i.e., the "root" modules. There should be exactly one root module, which I
shall call "Main".

Each variable that is exported from Main will become a command that can be
called in the generated program.

== Collect

Next a bipartite, ambiguous, abstract syntax tree (AST) is built for each
variable exported from Main. The AST is implemented as a pair of mutually
recursive data structures.

`SAnno` associates a set of subtrees with a shared annotation (general type and metadata).

[source, haskell]
----
data SAnno g f c = SAnno (f (SExpr g f c, c)) g
----

Where
 * g - an annotation for the group of child trees (what they have in common)
 * f - a collection of subtrees
 * c - an annotation for the specific child tree

`SExpr` stores an expression node and `SAnno` children.

[source, haskell]
----
data SExpr g f c
  = UniS
  | VarS EVar
  | ListS [SAnno g f c]
  | TupleS [SAnno g f c]
  | LamS [EVar] (SAnno g f c)
  | AppS (SAnno g f c) [SAnno g f c]
  | NumS Scientific
  | LogS Bool
  | StrS Text
  | RecS [(EVar, SAnno g f c)]
  | CallS Source
  | ForeignS Int Lang [EVar]
----

== Rewrite

The ASTs made in Collect are not quite ready for translation yet. They contain
`morloc` functions on the right-hand-side of equations. Yet these functions are
not "real" and should not appear (except as debugging info) in the final
generated code.

For example, consider the following `morloc` script:

----
import cppbase (mul, add)

export foo

foo x y = bar x (baz y)
bar x y = mul x (add y 1)
baz x = mul x x 
----

The Rewrite step redefines the exported `foo` function by eliminating the `bar`
and `baz` abstractions, as below:

----
foo x y = mul x (add (mul y y) 1)
----

The process is complicated when there are unresolved topology differences. For
example, if `bar` has two definitions, as below:

----
import cppbase (mul, add, bar)

export foo

foo x y = bar x (baz y)
bar x y = mul x (add y 1)
baz x = mul x x 
----

Now `bar` can either be the `morloc` abstraction or the `C++` function. So we
can generate two possible forms of `foo`:

----
foo x y = mul x (add (mul y y) 1)
foo x y = bar x (mul y y)
----

These two ASTs will be included under the `Many` in the `SAnno` output.

== Realize

The `f` in the `SAnno` type takes on two forms in the generator: `One` or `Many`:

[source, haskell]
----
data One a = One a
data Many a = Many [a]
----

The prior "Collect" step gathers all possible programs into one tree, thus `f`
is `Many`. The "Realize" step collapses the tree done to a single "realization"
(or "instance"). Thus the `realize` function, eliding implementation details,
has the type: 

[source, haskell]
----
realize :: SAnno g Many [Type] -> SAnno g One Type
----

Two levels of ambiguity are removed in this step. The `Many` to `One`
transition selects selects a single sub-tree topology. For example, suppose there 

[source]
----
import math (sum, div, length, mean)
source R ("mean")

export mean
mean xs = div (sum xs) (length xs)
----

Here we have three definitions of `mean`. One is sourced from the `R` language
(where it is a built in function). One is sourced from the `morloc math`
module, where it is implemented in C. One is defined as a `morloc` composition of
the three functions `div`, `sum`, and `length`; these are all implemented in C
currently, but they could gain more implementations in the future.

There are *three* definitions of `mean`, and *two* topologies (thus two
elements in `Many`). The topologies are either the `(div (sum xs) (length xs))`
tree or the call to the `R` or `C` functions. The first problem is the
`Many->One` selection. The second problem is the `[Type]->Type` problem, where
the sourced implementation is chosen. Here we decide just between a single `R`
and single `C` function. But the choice could be more involved, such as
choosing between a dozen sort algorithms all written in `C`.

This is the data structure is the starting point for an epic optimization
problem.


=== Algorithm optimization

In the distant future, when `morloc` is mature, the realization step will
incorporate community knowledge, performance modeling, and benchmarking to make
the optimal decision. For now, I assign a relative cost to each pair of
inter-language calls and find the tree that minimizes the total cost.

The most interesting optimizations those that involve choices between
algorithms. We could build formal performance models for each algorithm and
parameterize them empirically for each implementation.

 * performance
 * accuracy
 * parameterization


=== Build optimization

The goal of build optimization is to 1) ensure the program compiles, 2)
minimize the dependencies and 3) tailor the build to the local architecture. In
theory, a `morloc` program can avoid bit-rot and adapt to any architecture so
long as there exists at least one valid tree instance.

I haven't worked on build optimization yet, but I imagine the input to the
mature `morloc` build machine will be a description of the local architecture and
a list of possible ASTs, ordered by expected performance. The machine could
then try to build the "best" tree. If the build fails, the machine then finds
the next highest scoring tree that does not contain the failing component.

Making this process efficient through judicious use of deep knowledge gathered
from the community will be a major focus in the future. The knowledge gained in
one build (e.g., function X failed on OS Y in state Z) could be uploaded
automatically to the community knowledgebase and accessed in future builds.


=== Interoperability optimization

The minimization of inter-operability costs is the easiest optimization and the
only one that is currently supported. Program performance can be optimized by
reducing the number and cost of foreign calls.

.Penalties for calls between languages
----
          C    Python           R
C         1       100        1000
Python   10         2        1000
R        10       100           3
----

The values in the table above are obviously very rough, but they demonstrate
important principles for optimizing `morloc` programs. Calls within languages are
cheap and between languages are expensive. Major performance improvements could
be obtained by removing the start-up costs of loading the R/Python runtime
(e.g., passing data to an open R server rather than restarting R for every
call).

== Serialization

The current interoperability paradigm `morloc` follows under the hood is based
entirely on serialization. To be clear, serialization is not a fundamental
requirement of `morloc`, if someone where to develop clean solutions for
machine-level interoperability between all languages, then `morloc` could use
this solution in place of the current serialization solution. The transition
from serialization interop would be invisible to most morloc programmers, since
most programmers will be relying entirely on interop code written deep within
modules they import. They would see only a sudden increase in the performance
of their code.

=== Specifying serialization functions

=== Selecting serialization functions

Deciding which serialization function to use for a given concrete type is
certainly not trivial. There may be several choices. For example, suppose we
have the tuple `(int, bool)`. This could be deserialized by any of the following
functions: 

 1. `JSON -> forall a . a`
 2. `JSON -> forall a . (a, bool)`
 3. `JSON -> forall a . (int, a)`
 4. `JSON -> forall a b . (a, b)`
 5. `JSON -> (int, bool)`

The first deserializer is the most generic choice. It is the default
serialization function that will happily attempt to serialize anything. In some
languages, a single, well-designed serialization library may be able to
deserialize any type of input, and this one generic deserializer may be all
that is needed. But so far, even in the dynamic Python and R languages, the
generic serialization tools are insufficient.

The five functions above are all possible deserializers for type `(int, bool)`.
But in practice, we will need to find a suitable serializer from a much larger
list of all serializers available for this language. This can be done by 1)
selecting all functions where the deserialized type (or serialized type) is a
subtype of the given type and 2) then selecting the function that is **maximal**.

[latexmath]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
S_j = \text{max}_{subtype} [ t_i\ |\ t_i \leftarrow S_{all}, t_i <: t_j ]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Since this is a partial order, there may be multiple maximal elements. For
example, both #2 and #3 (from above), are subtypes of `(int, bool)`, but
neither are subtypes of eachother, so if #5 where not in the set, these two
functions would be the maxima. To split ties, I could add another ordering to
types or use the generic Haskell ordering. I have not yet settled on a
convention.

Here are a few examples of ordering:

[latexmath]
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\forall a . a <: A \\
\forall a . a <: \forall a b . (a, b) \\
\forall a b . (a, b) <: \forall a . (a, B) \\
\forall a b . (a, b) <: (A, B)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

=== Composing serialization functions

We obviously don't want to have to write a dedicated pair of
serialization/deserialization functions for every type in every language. To
avoid such a combinatorial explosion of helper functions, we need a method of
composing serialization functions automatically.

I have not yet implemented serialization composition yet, but here is roughly
how it will could eventually be accomplished.

=== Serialization format standards

=== non-JSON serialization
