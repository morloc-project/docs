
== Build system

Internally, `morloc` follows a model similar to Pandoc. Pandoc can convert
between markup formats (for example HTML, Markdown, LaTeX, and Word). All data
is stored internally as an abstract syntax tree. To add a new markup format,
a programmer only needs to add a Reader and Writer that converts the new markup
format to and from Pandoc's internal format.

From the `morloc` users perspective, a module is a set of `morloc` functions that
can be used in a `morloc` program. Each function in the module has a type. But
the actual implementation, which is hidden from the `morloc` user, is a bit
tricky. There are a couple very different cases:

the imported module is:

 1. a `morloc` script. In this case, we are importing selected compositions
    written in `morloc`. These `morloc` imports are nodes on a tree. 

 2. a single function in language X that uses only core features from X. No
    external libraries are used. No version info given. It is assumed that the
    function will work on any version of the language.

 3. a collection of functions in X and imports from X libraries. No version
    info. In this case, the `morloc` compiler needs to find and install the
    required libraries. It is assumed that the functions will work with an
    version of the language or libraries.

 4. #2 or #3, but with version info given. Install the specific version, or the
    highest version in the range.

 5. import a library from X. This is easier than #2-4, see the note below.

=== How to make a `morloc` module

image::linear-algebra-module.png[]
