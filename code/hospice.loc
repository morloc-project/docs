-- -- example: encloseBy "{" "}" "," [1,2,3]
-- encloseBy :: Str -> Str -> Str -> [Str] -> Str
-- encloseBy = _
--
--
-- command ("smof clean --type n" as clean_dna) :: SmofCleanOpts -> DNA -> DNA
--
-- command clean_aa :: "smof clean --type p @1" (SmofCleanOpts AA) (SmofCleanEffects AA)
--
-- writeFasta :: [(Str,Str)] -> Str
-- readFasta :: Str -> [(Str,Str)]
--
-- options Bash (SmofCleanOpts t) = SmofCleanOpts
--   { to_upper :: Flag "--upper" False {-^ hhh -}
--   , case :: Choice [Flag "--toupper" False, Flag "--tolower" False]
--   , input :: Positional t (t -> AA)
--   }
--
-- effects (SmofCleanEffects t) = SmofCleanEffects
--   { output = Stdout (AA -> t)
--   , log = File "log"
--   }
--
-- smof_clean :: "smof clean"
--
-- foo x :: clean {to_upper = True, input=

withSys :: (a -> ~x) -> (~y -> b) -> (~x -> ~y) -> a -> b 

withFun :: (~x -> a) -> (b -> ~y) -> (a -> b) -> ~x -> ~y

-- types
-- parameters
-- types that depend on parameters
-- parameters that depend on type


-- -- pipe variants
-- align :: pipe => ~Fasta a b c -> ~Fasta a Aligned c
-- align = `muscle`
--
-- align_fast :: [(Seq, Seq)] -> [(Seq, Seq)]
-- align_fast Bash :: ~Fasta a b c -> ~Fasta a Aligned c
--
-- system [pipe|muscle -diags -maxiters 1|] as align_fast
-- system [|muscle -in {f} -diags -maxiters 1|] as align_fast
--
-- -- non-pipe variants
-- _align :: ~~Fasta a b c -> ~Fasta a Aligned c
-- _align in = `muscle {in}`


autoFasta :: (~Fasta (Str, Str) -> ~Fasta (Str, Str)) -> [Str] -> [Str]

isFasta :: validate => ~Fasta (a, b) -> Bool
isAA :: validate => ~Fasta (AA, b) -> Bool
isDNA :: validate => ~Fasta (DNA, b) -> Bool
isAligned :: validate => ~Fasta (a, Aligned) -> Bool

cat :: ~~a -> ~a
cat x = `cat {x}`

uncat :: ~a -> ~~a
uncat x = `<({x})`

toFasta   :: show => [(Str, Str)] -> ~Fasta (a, b)
fromFasta :: read => ~Fasta (a, b) -> [(a, b)]

source Cpp from "bio-formats.h" (fasta2clustalW, clustalW2fasta)
fasta2clustalW :: convert => ~Fasta (a, Aligned) -> ~ClustalW (a, Aligned)
clustalW2fasta :: convert => ~ClustalW (a, Aligned) -> ~Fasta (a, Aligned)

type DbPath = Str
table BlastResult = BlastResult
  {
  }


blast :: DbPath -> [(Str, Str)] -> BlastResult  

makeblastdb :: [(Str, Str)] -> DbPath -> DbPath
makeblastdb xs = `makeblastdb` writeFasta xs


type FastaPipe a1 b1 a2 b2 = ~Fasta (a1, b1) -> ~Fasta (a2, b2)
type DnaFastaPipe = FastaPipe DNA b1 DNA b2

foo :: ~Fasta (DNA, a) -> ~Fasta (AA, Aligned)
foo in out :: cat in
            | [|smof clean --type n --toupper --standardize --col_width 60|] :: DnaFastaPipe
            | [|smof translate -f|] :: FastaPipe DNA b AA d
            | [|muscle -diags -maxiters 1|] :: FastaPipe a b c Aligned
            > out

with_vals (autoFasta foo)


readlines :: Filename -> [Str]

regexMatch :: Str -> Str -> Bool

regexGroup :: Str -> Str -> [Str]

contains :: Str -> Str -> Bool

grep :: [Str] -> (Str -> Bool) -> [Str]

grep_context :: Int -> Int -> (Str -> Bool) -> [[Str]]

grep_rec :: Path -> (Str -> Bool) -> [Path]

-- just a map function
sed :: [Str] -> (Str -> Str) -> [Str] 

-- unalign :: pipe => ~Fasta (a, b) -> ~Fasta (a, Unaligned)
-- unalign = `smof clean --toseq`
--
-- translate :: pipe => ~Fasta (DNA, b) -> ~Fasta (AA, b)
-- translate fasta = `smof translate -f <({fasta})`
--
-- check :: [(Str,Str)] -> [(Str,Str)]
-- check = undefined
--
-- foo in out :: in | clean_dna | translate | align | ~check | writeFasta out
--
-- bar :: [~~Fasta (DNA, b)] -> [~~Fasta (AA, Aligned)]
-- bar fasta_files = map foo fasta_files
--
-- foo f :: head (fromFasta `smof translate -f {f}`)
--
-- record MafftOptions = {
--     nt :: "-nt"
-- }


-- clean_faa :: [(Str, Str)] -> [(Str, Str)]
-- clean_faa Bash :: pipe => ~Fasta (AA, a) -> ~Fasta (AA, a)
-- clean_faa = `smof clean --type p --toupper --standardize --col_width 60`
--
-- unalign :: pipe => ~Fasta (a, b) -> ~Fasta (a, Unaligned)
-- unalign = `smof clean --toseq`
--
-- translate :: pipe => ~Fasta (DNA, b) -> ~Fasta (AA, b)
-- translate fasta = `smof translate -f <({fasta})`
--
-- check :: [(Str,Str)] -> [(Str,Str)]
-- check = undefined
--
-- foo in out :: in | clean_dna | translate | align | ~check | writeFasta out
--
-- bar :: [~~Fasta (DNA, b)] -> [~~Fasta (AA, Aligned)]
-- bar fasta_files = map foo fasta_files
--
-- foo f :: head (fromFasta `smof translate -f {f}`)
--
-- record MafftOptions = {
--     nt :: "-nt"
-- }
